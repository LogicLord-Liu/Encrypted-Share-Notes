---
// src/pages/index.astro
import Layout from "../layouts/Layout.astro";

import Header from "../components/Header";
import Footer from "../components/Footer";
import MainContent from "../components/NoteEditor.astro";
---

<Layout title="安全分享 - Enclosed">
  <Header client:load />

  <MainContent client:load />

  <Footer client:load />
</Layout>

<script is:inline>
  // 获取 DOM 元素
  const noteContentInput = document.getElementById("note-content");
  const notePasswordInput = document.getElementById("note-password");
  const togglePasswordButton = document.getElementById("toggle-password");
  const eyeOpenIcon = document.getElementById("eye-open");
  const eyeClosedIcon = document.getElementById("eye-closed");
  const generatePasswordButton = document.getElementById("generate-password");
  const expirationOptionsContainer =
    document.getElementById("expiration-options");
  const deleteAfterReadingCheckbox = document.getElementById(
    "delete-after-reading"
  );
  const createNoteButton = document.getElementById("create-note-button");

  // 状态变量
  let showPassword = false;
  let selectedExpiration = "1hour"; // 默认值

  // 密码显示/隐藏
  togglePasswordButton.addEventListener("click", () => {
    showPassword = !showPassword;
    notePasswordInput.type = showPassword ? "text" : "password";
    eyeOpenIcon.classList.toggle("hidden", !showPassword);
    eyeClosedIcon.classList.toggle("hidden", showPassword);
  });

  // 生成密码
  generatePasswordButton.addEventListener("click", () => {
    const chars =
      "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+";
    let password = "";
    for (let i = 0; i < 15; i++) {
      password += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    notePasswordInput.value = password;
  });

  // 过期时间选择
  expirationOptionsContainer.addEventListener("click", (event) => {
    const targetButton = event.target.closest("button[data-value]");
    if (targetButton) {
      // 移除所有按钮的选中样式
      expirationOptionsContainer.querySelectorAll("button").forEach((btn) => {
        btn.classList.remove("bg-blue-600", "text-white");
        btn.classList.add("bg-gray-100", "text-gray-700", "hover:bg-gray-200");
      });
      // 添加选中按钮的样式
      targetButton.classList.add("bg-blue-600", "text-white");
      targetButton.classList.remove(
        "bg-gray-100",
        "text-gray-700",
        "hover:bg-gray-200"
      );
      selectedExpiration = targetButton.dataset.value;
    }
  });

  // 启用/禁用创建笔记按钮
  noteContentInput.addEventListener("input", () => {
    createNoteButton.disabled = noteContentInput.value.trim() === "";
  });
  // 初始禁用状态
  createNoteButton.disabled = noteContentInput.value.trim() === "";

  // 创建笔记逻辑
  createNoteButton.addEventListener("click", () => {
    const noteContent = noteContentInput.value.trim();
    if (!noteContent) {
      alert("笔记内容不能为空！");
      return;
    }

    const notePassword = notePasswordInput.value;
    const deleteAfterReading = deleteAfterReadingCheckbox.checked;

    console.log("创建笔记：", {
      content: noteContent,
      password: notePassword,
      expiration: selectedExpiration,
      deleteAfterReading: deleteAfterReading,
    });

    alert("笔记创建功能待实现！请查看控制台输出。");

    // 模拟成功后清空表单
    noteContentInput.value = "";
    notePasswordInput.value = "";
    deleteAfterReadingCheckbox.checked = false;
    // 重置过期时间选择样式 (这里简单地重置为默认的"1 小时")
    expirationOptionsContainer.querySelectorAll("button").forEach((btn) => {
      btn.classList.remove("bg-blue-600", "text-white");
      btn.classList.add("bg-gray-100", "text-gray-700", "hover:bg-gray-200");
      if (btn.dataset.value === "1hour") {
        btn.classList.add("bg-blue-600", "text-white");
        btn.classList.remove(
          "bg-gray-100",
          "text-gray-700",
          "hover:bg-gray-200"
        );
      }
    });
    selectedExpiration = "1hour";
    createNoteButton.disabled = true; // 清空后再次禁用按钮
  });

  const uploadBtn = document.getElementById("upload-btn");
  const fileInput = document.getElementById("file-input");
  const uploadArea = document.getElementById("upload-area");
  const fileList = document.getElementById("file-list");
  const errorMessage = document.getElementById("error-message");
  const errorText = document.getElementById("error-text");

  const MAX_SIZE_MB = 10;

  uploadBtn.addEventListener("click", () => {
    console.log("点击按钮：打开文件选择器");
    fileInput.click();
  });

  fileInput.addEventListener("change", () => {
    const files = fileInput.files;
    console.log("选择的文件数量：", files.length);
    fileList.innerHTML = "";
    let hasError = false;

    for (const file of files) {
      console.log(`文件：${file.name}, 大小：${file.size / (1024 * 1024)} MB`);

      if (file.size > MAX_SIZE_MB * 1024 * 1024) {
        hasError = true;
        errorText.textContent = `文件 "${file.name}" 超过 ${MAX_SIZE_MB}MB 大小限制`;
        errorMessage.classList.remove("hidden");
      } else {
        const li = document.createElement("li");
        li.textContent = `${file.name} (${(file.size / 1024).toFixed(1)} KB)`;
        fileList.appendChild(li);
      }
    }

    if (!hasError) {
      errorMessage.classList.add("hidden");
    }

    if (files.length > 0) {
      uploadArea.classList.remove("hidden");
    }
  });
</script>
