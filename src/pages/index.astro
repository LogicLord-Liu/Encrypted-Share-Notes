---
// src/pages/index.astro
import Layout from "../layouts/Layout.astro";
import Header from "../components/Header";
import Footer from "../components/Footer";
import MainContent from "../components/NoteEditor.astro";
---

<Layout title="安全分享 - Enclosed">
  <Header client:load />
  <MainContent client:load />
  <Footer client:load />
</Layout>

<script is:inline>
  if (typeof window !== "undefined") {
    // 全局状态变量
    let showPassword = false;
    let selectedExpiration = "1hour";
    let uploadedFiles = [];
    const MAX_SIZE_MB = 10;
    const MAX_FILE_SIZE = MAX_SIZE_MB * 1024 * 1024;
    const NOTES_STORAGE_KEY = "enclosed_notes_data";
    const strengthLabels = ["非常弱", "弱", "中等", "强", "非常强"];
    const strengthColors = [
      "bg-red-500",
      "bg-orange-400",
      "bg-yellow-400",
      "bg-green-400",
      "bg-green-600",
    ];

    // DOM 元素引用
    const dom = {
      noteContentInput: document.getElementById("note-content"),
      notePasswordInput: document.getElementById("note-password"),
      togglePasswordButton: document.getElementById("toggle-password"),
      eyeOpenIcon: document.getElementById("eye-open"),
      eyeClosedIcon: document.getElementById("eye-closed"),
      generatePasswordButton: document.getElementById("generate-password"),
      expirationOptionsContainer: document.getElementById("expiration-options"),
      deleteAfterReadingCheckbox: document.getElementById(
        "delete-after-reading"
      ),
      createNoteButton: document.getElementById("create-note-button"),
      passwordStrengthText: document.getElementById("password-strength-text"),
      passwordStrengthFill: document.getElementById("password-strength-fill"),
      successModal: document.getElementById("success-modal"),
      successModalContent: document.getElementById("success-modal-content"),
      encryptedLinkDisplay: document.getElementById("encrypted-link-display"),
      copyLinkButton: document.getElementById("copy-link-button"),
      copyFeedback: document.getElementById("copy-feedback"),
      qrcodeContainer: document.getElementById("qrcode-container"),
      qrcodeCanvas: document.getElementById("qrcode-canvas"),
      closeModalButton: document.getElementById("close-modal-button"),
      errorMessageContainer: document.getElementById("error-message"),
      uploadBtn: document.getElementById("upload-btn"),
      fileInput: document.getElementById("file-input"),
      uploadArea: document.getElementById("upload-area"),
      fileList: document.getElementById("file-list"),
      errorText: document.getElementById("error-text"),
    };

    // --- 辅助函数 ---

    function generateUniqueId() {
      return (
        Math.random().toString(36).substring(2, 15) +
        Math.random().toString(36).substring(2, 15)
      );
    }

    function waitForGlobal(variableName, timeout = 5000) {
      return new Promise((resolve, reject) => {
        const startTime = Date.now();
        const checkInterval = setInterval(() => {
          if (
            typeof window[variableName] !== "undefined" &&
            window[variableName] !== null
          ) {
            clearInterval(checkInterval);
            resolve(window[variableName]);
          } else if (Date.now() - startTime > timeout) {
            clearInterval(checkInterval);
            reject(new Error(`${variableName} 未能在 ${timeout}ms 内加载。`));
          }
        }, 50);
      });
    }

    // --- 文件上传和删除逻辑 ---

    function renderFileList() {
      if (!dom.fileList) return;
      dom.fileList.innerHTML = "";

      if (uploadedFiles.length === 0) {
        if (dom.uploadArea) dom.uploadArea.classList.add("hidden");
        return;
      }

      if (dom.uploadArea) dom.uploadArea.classList.remove("hidden");

      uploadedFiles.forEach((fileInfo) => {
        const li = document.createElement("li");
        li.classList.add("flex", "items-center", "justify-between", "my-1");
        li.dataset.filename = fileInfo.name;

        const fileNameSpan = document.createElement("span");
        fileNameSpan.textContent = `${fileInfo.name} (${(fileInfo.size / 1024).toFixed(1)} KB)`;
        li.appendChild(fileNameSpan);

        const deleteButton = document.createElement("button");
        deleteButton.type = "button";
        deleteButton.textContent = "❌";
        deleteButton.classList.add(
          "text-red-500",
          "hover:text-red-700",
          "font-medium",
          "ml-4"
        );

        deleteButton.dataset.filename = fileInfo.name;

        deleteButton.addEventListener("click", () => {
          uploadedFiles = uploadedFiles.filter((f) => f.name !== fileInfo.name);
          renderFileList();
          if (uploadedFiles.length === 0) {
            if (dom.fileInput) dom.fileInput.value = "";
          }
        });

        li.appendChild(deleteButton);
        dom.fileList.appendChild(li);
      });
    }

    function handleFileChange() {
      const files = dom.fileInput.files;
      let hasError = false;

      if (files.length === 0) {
        if (uploadedFiles.length === 0 && dom.fileInput) {
          dom.fileInput.value = "";
        }
        return;
      }

      uploadedFiles = [];

      for (const file of files) {
        if (file.size > MAX_FILE_SIZE) {
          hasError = true;
          if (dom.errorText)
            dom.errorText.textContent = `文件 "${file.name}" 超过 ${MAX_SIZE_MB}MB 大小限制`;
          if (dom.errorMessageContainer)
            dom.errorMessageContainer.classList.remove("hidden");
          break;
        }
        uploadedFiles.push(file);
      }

      if (hasError) {
        if (dom.uploadArea) dom.uploadArea.classList.add("hidden");
        if (dom.fileInput) dom.fileInput.value = "";
      } else {
        if (dom.errorMessageContainer)
          dom.errorMessageContainer.classList.add("hidden");
        renderFileList();
      }
    }

    // --- 创建笔记和弹窗逻辑 ---

    async function handleCreateNote() {
      console.log("创建笔记按钮被点击了！");

      const noteContent = dom.noteContentInput.value.trim();
      if (!noteContent) {
        alert("笔记内容不能为空！");
        return;
      }

      if (!dom.errorMessageContainer.classList.contains("hidden")) {
        alert("请解决文件上传错误后重试。");
        return;
      }

      dom.createNoteButton.disabled = true;

      const notePassword = dom.notePasswordInput.value;
      const deleteAfterReading = dom.deleteAfterReadingCheckbox.checked;
      const newNoteId = generateUniqueId();
      const encryptedLink = `${window.location.origin}/note/${newNoteId}`;

      try {
        // 模拟后端请求，这里可以添加真实的 fetch 请求
        // 假设成功，直接执行后续逻辑
        
        // **新增或修改的笔记数据对象**
        const newNote = {
          id: newNoteId,
          content: noteContent,
          password: notePassword,
          expiration: selectedExpiration,
          deleteAfterReading: deleteAfterReading,
          files: uploadedFiles.map((f) => ({
            name: f.name,
            size: f.size,
            type: f.type,
          })),
          createdAt: new Date().toISOString(),
        };

        // **核心修改点：将新笔记保存到 localStorage**
        let notes = JSON.parse(localStorage.getItem(NOTES_STORAGE_KEY) || "[]");
        notes.push(newNote);
        localStorage.setItem(NOTES_STORAGE_KEY, JSON.stringify(notes));

        console.log("创建笔记并保存到 localStorage：", newNote);



        // 重置表单
        dom.noteContentInput.value = "";
        dom.notePasswordInput.value = "";
        dom.deleteAfterReadingCheckbox.checked = false;
        uploadedFiles = [];
        if (dom.fileInput) dom.fileInput.value = "";
        renderFileList();

        // 重置过期时间选择按钮样式
        dom.expirationOptionsContainer
          .querySelectorAll("button")
          .forEach((btn) => {
            btn.classList.remove("bg-sky-500/60", "text-white");
            btn.classList.add(
              "bg-gray-100",
              "text-gray-700",
              "hover:bg-gray-200"
            );
            if (btn.dataset.value === "1hour") {
              btn.classList.add("bg-sky-500/60", "text-white");
              btn.classList.remove(
                "bg-gray-100",
                "text-gray-700",
                "hover:bg-gray-200"
              );
            }
          });
        selectedExpiration = "1hour";
        dom.createNoteButton.disabled = true;

        // 更新弹窗内容并显示
        dom.encryptedLinkDisplay.value = encryptedLink;
        if (dom.qrcodeCanvas) {
          dom.qrcodeCanvas
            .getContext("2d")
            .clearRect(0, 0, dom.qrcodeCanvas.width, dom.qrcodeCanvas.height);
          try {
            const QRCodeGeneratorObj = await waitForGlobal("QRCodeGenerator");
            if (typeof QRCodeGeneratorObj.toCanvas === "function") {
              await QRCodeGeneratorObj.toCanvas(
                dom.qrcodeCanvas,
                encryptedLink,
                {
                  width: 128,
                  errorCorrectionLevel: "H",
                }
              );
              if (!dom.qrcodeCanvas.dataset.listenerAdded) {
                dom.qrcodeCanvas.style.cursor = "pointer"; // 鼠标悬停时显示手型
                dom.qrcodeCanvas.addEventListener("click", () => {
                  dom.encryptedLinkDisplay.select();
                  dom.encryptedLinkDisplay.setSelectionRange(0, 99999);
                  navigator.clipboard
                    .writeText(dom.encryptedLinkDisplay.value)
                    .then(() => {
                      dom.copyFeedback.textContent = "二维码链接已复制！";
                      dom.copyFeedback.classList.remove("hidden");
                      setTimeout(() => {
                        dom.copyFeedback.classList.add("hidden");
                        dom.copyFeedback.textContent = "链接已复制！"; // 恢复原始提示文本
                      }, 2000);
                    })
                    .catch((err) => {
                      console.error("通过点击二维码复制失败:", err);
                      alert("复制链接失败，请手动复制。");
                    });
                });
                dom.qrcodeCanvas.dataset.listenerAdded = "true"; // 标记已添加，避免重复绑定
              }
            } else {
              if (dom.qrcodeContainer)
                dom.qrcodeContainer.textContent = "二维码生成失败。";
            }
          } catch (error) {
            console.error("二维码库加载或生成失败:", error);
            if (dom.qrcodeContainer)
              dom.qrcodeContainer.textContent = "二维码生成失败。";
            alert("二维码生成失败：" + error.message);
          }
        }

        dom.successModal.classList.remove("hidden");
        void dom.successModal.offsetWidth;
        dom.successModal.classList.add("opacity-100");
        dom.successModalContent.classList.remove("scale-95", "opacity-0");
        dom.successModalContent.classList.add("scale-100", "opacity-100");
      } catch (error) {
        console.error("创建笔记失败:", error);
        alert(`创建笔记失败: ${error.message}`);
      } finally {
        dom.createNoteButton.disabled = false;
      }
    }

    function handleCopyLink() {
      dom.encryptedLinkDisplay.select();
      dom.encryptedLinkDisplay.setSelectionRange(0, 99999);
      navigator.clipboard
        .writeText(dom.encryptedLinkDisplay.value)
        .then(() => {
          dom.copyFeedback.textContent = "链接已复制！";
          dom.copyFeedback.classList.remove("hidden");
          setTimeout(() => dom.copyFeedback.classList.add("hidden"), 2000);
        })
        .catch((err) => {
          console.error("复制失败:", err);
          alert("复制链接失败，请手动复制。");
        });
    }

    function handleCloseModal() {
      dom.successModal.classList.remove("opacity-100");
      dom.successModalContent.classList.remove("scale-100", "opacity-100");
      dom.successModalContent.classList.add("scale-95", "opacity-0");
      setTimeout(() => dom.successModal.classList.add("hidden"), 300);
    }

    // --- 初始化函数 ---

    function initEventListeners() {
      if (dom.notePasswordInput) {
        dom.notePasswordInput.addEventListener("input", () => {
          const value = dom.notePasswordInput.value;
          if (typeof zxcvbn !== "undefined") {
            const result = zxcvbn(value);
            dom.passwordStrengthText.textContent = value
              ? `密码强度：${strengthLabels[result.score]}`
              : "";
            strengthColors.forEach((c) =>
              dom.passwordStrengthFill.classList.remove(c)
            );
            if (value) {
              dom.passwordStrengthFill.classList.add(
                strengthColors[result.score]
              );
              dom.passwordStrengthFill.style.width = `${(result.score + 1) * 20}%`;
            } else {
              dom.passwordStrengthFill.style.width = "0%";
            }
          }
        });
        if (dom.notePasswordInput.value) {
          dom.notePasswordInput.dispatchEvent(new Event("input"));
        }
      }

      if (dom.togglePasswordButton) {
        dom.togglePasswordButton.addEventListener("click", () => {
          showPassword = !showPassword;
          dom.notePasswordInput.type = showPassword ? "text" : "password";
          dom.eyeOpenIcon.classList.toggle("hidden", !showPassword);
          dom.eyeClosedIcon.classList.toggle("hidden", showPassword);
        });
      }

      if (dom.generatePasswordButton) {
        dom.generatePasswordButton.addEventListener("click", () => {
          const chars =
            "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+";
          let password = "";
          for (let i = 0; i < 15; i++) {
            password += chars.charAt(Math.floor(Math.random() * chars.length));
          }
          dom.notePasswordInput.value = password;
          dom.notePasswordInput.dispatchEvent(
            new Event("input", { bubbles: true, cancelable: true })
          );
        });
      }

      if (dom.expirationOptionsContainer) {
        dom.expirationOptionsContainer.addEventListener("click", (event) => {
          const targetButton = event.target.closest("button[data-value]");
          if (targetButton) {
            dom.expirationOptionsContainer
              .querySelectorAll("button")
              .forEach((btn) => {
                btn.classList.remove("bg-sky-500/60", "text-white");
                btn.classList.add(
                  "bg-gray-100",
                  "text-gray-700",
                  "hover:bg-gray-200"
                );
              });
            targetButton.classList.add("bg-sky-500/60", "text-white");
            targetButton.classList.remove(
              "bg-gray-100",
              "text-gray-700",
              "hover:bg-gray-200"
            );
            selectedExpiration = targetButton.dataset.value;
          }
        });
      }

      if (dom.noteContentInput && dom.createNoteButton) {
        dom.noteContentInput.addEventListener("input", () => {
          dom.createNoteButton.disabled =
            dom.noteContentInput.value.trim() === "";
        });
        dom.createNoteButton.disabled =
          dom.noteContentInput.value.trim() === "";
      }

      if (dom.uploadBtn && dom.fileInput) {
        dom.uploadBtn.addEventListener("click", () => dom.fileInput.click());
        dom.fileInput.addEventListener("change", handleFileChange);
      }

      if (dom.createNoteButton) {
        dom.createNoteButton.addEventListener("click", handleCreateNote);
      }

      if (dom.copyLinkButton) {
        dom.copyLinkButton.addEventListener("click", handleCopyLink);
      }

      if (dom.encryptedLinkDisplay) {
        dom.encryptedLinkDisplay.addEventListener("click", handleCopyLink);
      }

      if (dom.closeModalButton) {
        dom.closeModalButton.addEventListener("click", handleCloseModal);
      }

      if (dom.successModal) {
        dom.successModal.addEventListener("click", (event) => {
          if (event.target === dom.successModal) {
            handleCloseModal();
          }
        });
      }
    }

    // 页面加载时执行初始化
    document.addEventListener("DOMContentLoaded", initEventListeners);
  }
</script>
