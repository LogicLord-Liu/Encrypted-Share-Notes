---
import Layout from "../../layouts/Layout.astro";

// 在服务器端获取路由参数
const { id } = Astro.params;
---

<Layout title="查看笔记 - Enclosed">
  <main class="flex flex-col items-center justify-center min-h-screen">
    <div class="bg-white p-8 rounded-lg shadow-lg w-full max-w-2xl text-center">
      <h1 class="text-3xl font-bold mb-6 text-gray-800">笔记内容</h1>

      <div id="note-display-area">
        <p class="text-gray-600">正在加载笔记...</p>
      </div>

      <div id="password-form-container" class="hidden"></div>

      <a href="/" class="mt-8 inline-block text-sky-600 hover:underline"
        >返回首页</a
      >
    </div>
  </main>
</Layout>

<script is:inline>
  if (typeof window !== "undefined") {
    const url = new URL(window.location.href);
    const noteId = url.pathname.split("/").pop();
    const noteDisplayArea = document.getElementById("note-display-area");
    const passwordFormContainer = document.getElementById(
      "password-form-container"
    );
    const isProduction = window.location.hostname !== "localhost";

    let deleteTriggered = false;

    function displayError(message) {
      if (!noteDisplayArea) return;
      noteDisplayArea.innerHTML = `
        <div class="text-red-500 font-medium text-center">加载笔记失败</div>
        <p class="text-red-500 text-center mt-2">${message}</p>
      `;
    }

    function renderNoteContent(note, decryptedContent, decryptedFiles = []) {
      if (!noteDisplayArea) return;

      let fileListHtml = "";
      if (note.files && note.files.length > 0) {
        if (isProduction) {
          fileListHtml = `
            <div class="mt-4">
              <p class="font-medium">附件:</p>
              <ul class="list-disc list-inside mt-1 mx-auto text-left w-fit">
                ${note.files
            .map(
              (file) =>
                `<li><a href="/api/file/${note.id}/${file.fileId}" download="${file.name}" class="text-sky-600 hover:underline">${file.name}</a></li>`
            )
            .join("")}
              </ul>
            </div>`;
        } else {
          fileListHtml = `
            <div class="mt-4">
              <p class="font-medium">附件:</p>
              <ul class="list-disc list-inside mt-1 mx-auto text-left w-fit">
                ${decryptedFiles
            .map(
              (file) =>
                `<li><a href="${file.url}" download="${file.name}" class="text-sky-600 hover:underline">${file.name} (${(file.size / 1024).toFixed(1)} KB)</a></li>`
            )
            .join("")}
              </ul>
            </div>`;
        }
      }
      noteDisplayArea.innerHTML = `
        <article class="prose lg:prose-lg mx-auto text-left break-all whitespace-pre-wrap">
          <p>${decryptedContent}</p>
        </article>

        <!-- 信息展示区 -->
        <div class="mt-10 pt-6 border-t border-gray-100 text-sm text-gray-600 space-y-3">

          <!-- 时间信息区 -->
          <div class="flex flex-col sm:flex-row sm:justify-between sm:items-center gap-3 text-left">
            <div class="flex items-center gap-2">
              <svg class="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                      d="M8 7V3M16 7V3M4 11h16M5 19h14a2 2 0 0 0 2-2v-6H3v6a2 2 0 0 0 2 2z"/>
              </svg>
              <span>创建时间：${new Date(note.createdAt).toLocaleString()}</span>
            </div>
            <div class="flex items-center gap-2">
              <svg class="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                      d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"/>
              </svg>
              <span>过期时间：${note.expiration}(s)</span>
            </div>
          </div>

          <!-- 删除提示 -->
          ${
            note.deleteAfterReading
              ? `<p class="text-red-500 font-semibold text-center">
                  ⚠️ 此笔记将在首次阅读后自动删除
                </p>`
              : ""
          }

          <!-- 文件附件区（保持 fileListHtml 结构） -->
          ${fileListHtml}
      `;
      if (passwordFormContainer) {
        passwordFormContainer.innerHTML = "";
        passwordFormContainer.classList.add("hidden");
      }
    }

    async function decryptFiles(files, cryptoKey, ivBuffer) {
      const decryptedFiles = await Promise.all(
        files.map(async (file) => {
          try {
            const encryptedContentBuffer = Uint8Array.from(
              atob(file.data),
              (c) => c.charCodeAt(0)
            );
            const decryptedContent = await window.crypto.subtle.decrypt(
              { name: "AES-GCM", iv: ivBuffer },
              cryptoKey,
              encryptedContentBuffer
            );
            const blob = new Blob([decryptedContent], { type: file.type });
            const url = URL.createObjectURL(blob);
            return {
              name: file.name,
              size: file.size,
              type: file.type,
              url: url,
            };
          } catch (err) {
            console.error(`文件 ${file.name} 解密失败:`, err);
            return {
              name: `文件 ${file.name} (解密失败)`,
              size: 0,
              type: "text/plain",
              url: "#",
            };
          }
        })
      );
      return decryptedFiles;
    }

    async function decryptNote(note) {
      if (!note.key || !note.iv || !note.content) {
        throw new Error("笔记数据不完整，无法解密。");
      }
      const keyBase64 = note.key;
      const ivBase64 = note.iv;
      const encryptedContentBase64 = note.content;
      const notePassword = note.password || null;
      const keyBuffer = Uint8Array.from(atob(keyBase64), (c) =>
        c.charCodeAt(0)
      );
      const ivBuffer = Uint8Array.from(atob(ivBase64), (c) => c.charCodeAt(0));
      const encryptedContentBuffer = Uint8Array.from(
        atob(encryptedContentBase64),
        (c) => c.charCodeAt(0)
      );
      let finalKeyBuffer = keyBuffer;
      if (note.hasPassword) {
        if (!notePassword) {
          throw new Error("此笔记受密码保护，请输入密码。");
        }
        const encoder = new TextEncoder();
        const passwordKey = await window.crypto.subtle.importKey(
          "raw",
          encoder.encode(notePassword),
          { name: "PBKDF2" },
          false,
          ["deriveKey"]
        );
        const derivedPasswordKey = await window.crypto.subtle.deriveKey(
          {
            name: "PBKDF2",
            salt: ivBuffer,
            iterations: 100000,
            hash: "SHA-256",
          },
          passwordKey,
          { name: "AES-GCM", length: 256 },
          true,
          ["encrypt", "decrypt"]
        );
        try {
          finalKeyBuffer = await window.crypto.subtle.decrypt(
            { name: "AES-GCM", iv: ivBuffer },
            derivedPasswordKey,
            keyBuffer
          );
        } catch (err) {
          console.error("解密密钥失败:", err);
          throw new Error("密码错误或解密密钥失败。");
        }
      }
      const cryptoKey = await window.crypto.subtle.importKey(
        "raw",
        finalKeyBuffer,
        { name: "AES-GCM", length: 256 },
        true,
        ["decrypt"]
      );
      const decryptedContent = await window.crypto.subtle.decrypt(
        { name: "AES-GCM", iv: ivBuffer },
        cryptoKey,
        encryptedContentBuffer
      );
      const decoder = new TextDecoder();
      const decryptedText = decoder.decode(decryptedContent);
      return { content: decryptedText, cryptoKey, ivBuffer };
    }

    function renderPasswordForm(note) {
      if (!passwordFormContainer) return;
      noteDisplayArea.innerHTML =
        '<p class="text-gray-600">此笔记受密码保护。</p>';
      passwordFormContainer.innerHTML = `
        <div class="max-w-md mx-auto bg-white p-8 rounded-2xl shadow-lg text-center border border-gray-100">
          <h2 class="text-3xl font-semibold mb-6 text-gray-800">🔒 输入密码以查看内容</h2>
          <form id="password-form" class="space-y-5">
            <input 
              id="note-password-input"
              type="password"
              placeholder="请输入密码"
              class="w-full px-5 py-3 border border-gray-300 rounded-xl shadow-sm bg-gray-50 text-gray-700 placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-sky-400 focus:bg-white transition duration-200"
              required
            />
            <button 
              type="submit"
              class="w-full py-3 rounded-xl bg-sky-500 text-white font-medium tracking-wide hover:bg-sky-600 active:scale-[0.98] transition-all duration-200"
            >
              🔓 解锁笔记
            </button>
          </form>
        </div>
      `;
      passwordFormContainer.classList.remove("hidden");
      const passwordForm = document.getElementById("password-form");
      const passwordInput = document.getElementById("note-password-input");
      if (passwordForm && passwordInput) {
        passwordForm.addEventListener("submit", async (e) => {
          e.preventDefault();
          const password = passwordInput.value;
          passwordInput.classList.remove("border-red-500");
          passwordInput.placeholder = "请输入密码";
          try {
            await processNote(note, password);
          } catch (err) {
            passwordInput.classList.add("border-red-500");
            passwordInput.placeholder = "密码错误，请重试";
            passwordInput.value = "";
            console.error("解密失败:", err);
          }
        });
      }
    } // 新增: 统一处理笔记解密和渲染的函数

    async function processNote(foundNote, password = null) {
      const decryptionResult = await decryptNote({ ...foundNote, password });
      const decryptedContent = decryptionResult.content;
      let decryptedFiles = [];
      if (!isProduction && foundNote.files && foundNote.files.length > 0) {
        decryptedFiles = await decryptFiles(
          foundNote.files,
          decryptionResult.cryptoKey,
          decryptionResult.ivBuffer
        );
      }
      renderNoteContent(foundNote, decryptedContent, decryptedFiles); // ⭐ 核心改动：如果启用了阅后即焚，在用户离开页面时删除笔记

      if (foundNote.deleteAfterReading) {
        window.addEventListener("beforeunload", () => {
          // 使用 navigator.sendBeacon 来发送 DELETE 请求
          // 它能确保请求在页面关闭后依然能成功发送，而不会被中断
          if (!deleteTriggered) {
            const url = `/api/note/${foundNote.id}`;
            const beaconData = new FormData(); // 使用 fetch 发送 DELETE 请求
            fetch(url, { method: "DELETE", keepalive: true })
              .then((response) => {
                console.log(`笔记 ${foundNote.id} 已成功删除。`);
              })
              .catch((error) => {
                console.error(`删除笔记 ${foundNote.id} 时出错:`, error);
              });
            deleteTriggered = true;
          }
        });
      }
    }
    async function loadNote() {
      if (!noteId) {
        displayError("无效的笔记链接。");
        return;
      }
      try {
        const response = await fetch(`/api/note/${noteId}`);
        console.log(`GET /api/note/${noteId} status: ${response.status}`);
        if (!response.ok) {
          if (response.status === 404) {
            throw new Error("笔记未找到或已过期。");
          } else {
            throw new Error("加载笔记时发生网络错误。");
          }
        }
        const foundNote = await response.json();
        if (foundNote.hasPassword) {
          renderPasswordForm(foundNote);
        } else {
          await processNote(foundNote);
        }
      } catch (err) {
        console.error("加载笔记失败:", err);
        displayError(err.message);
      }
    }
    document.addEventListener("DOMContentLoaded", () => {
      loadNote();
    });
  }
</script>
