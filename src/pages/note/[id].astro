---
// src/pages/note/[id].astro
// 这是一个动态路由页面，用于显示单个笔记内容

import Layout from "../../layouts/Layout.astro";

// 从 Astro.params 获取动态路由参数
const { id } = Astro.params;
export const prerender = false;

// 在服务器端（构建时或开发服务器请求时）无法直接访问 localStorage
// 所以我们需要在客户端脚本中加载笔记数据

// 定义一个变量来传递到客户端脚本，或者直接在客户端脚本中获取 ID
// 我们将通过 JavaScript 在客户端获取 ID 和数据
---

<Layout title={`笔记详情 - ${id}`}>
  <main
    class="flex flex-col items-center justify-center min-h-screen bg-gray-50 text-gray-800 p-4"
  >
    <div class="bg-white rounded-lg shadow-xl p-8 w-full max-w-2xl text-center">
      <h1 class="text-3xl font-bold text-gray-800 mb-6">笔记内容</h1>

      <div id="note-display-area" class="text-left">
        <p class="text-gray-600 mb-4">加载中...</p>
      </div>

      <div id="password-input-container" class="mt-6 hidden">
        <label
          for="view-password"
          class="block text-gray-700 text-sm font-bold mb-2"
        >
          请输入密码查看笔记:
        </label>
        <input
          type="password"
          id="view-password"
          class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
          placeholder="笔记密码"
        />
        <button
          id="view-note-button"
          class="mt-4 bg-sky-500 hover:bg-sky-600 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
        >
          查看笔记
        </button>
      </div>

      <div id="file-attachments-area" class="mt-6 text-left hidden">
        <h3 class="text-xl font-bold mb-2">附件:</h3>
        <ul
          id="attached-files-list"
          class="list-disc list-inside text-gray-700"
        >
        </ul>
      </div>

      <div class="mt-8">
        <a href="/" class="text-sky-500 hover:underline">返回首页</a>
      </div>
    </div>
  </main>
</Layout>

<script is:inline>
  const NOTES_STORAGE_KEY = "enclosed_notes_data"; // 保持和主页一致

  const noteDisplayArea = document.getElementById("note-display-area");
  const passwordInputContainer = document.getElementById(
    "password-input-container"
  );
  const viewPasswordInput = document.getElementById("view-password");
  const viewNoteButton = document.getElementById("view-note-button");
  const fileAttachmentsArea = document.getElementById("file-attachments-area");
  const attachedFilesList = document.getElementById("attached-files-list");

  // 获取 URL 中的笔记 ID
  const pathParts = window.location.pathname.split("/");
  const noteId = pathParts[pathParts.length - 1]; // 假设 ID 是最后一个部分

  let currentNote = null; // 用于存储当前加载的笔记

  function displayNote(note) {
    if (!note) {
      noteDisplayArea.innerHTML = `<p class="text-red-500">笔记未找到或已过期/删除。</p>`;
      return;
    }

    let contentHtml = `<p class="text-lg mb-4 whitespace-pre-wrap">${note.content}</p>`;

    if (note.files && note.files.length > 0) {
      fileAttachmentsArea.classList.remove("hidden");
      attachedFilesList.innerHTML = "";
      note.files.forEach((file) => {
        const li = document.createElement("li");
        li.textContent = `${file.name} (${(file.size / 1024).toFixed(1)} KB)`;
        attachedFilesList.appendChild(li);
      });
      // 实际应用中，这里会是文件下载链接
      contentHtml += `<p class="text-sm text-gray-500 mt-2">（文件预览/下载功能需后端支持）</p>`;
    } else {
      fileAttachmentsArea.classList.add("hidden");
    }

    // 模拟过期时间显示
    if (note.expiration && note.expiration !== "never") {
      contentHtml += `<p class="text-sm text-gray-500 mt-2">此笔记将在 ${note.expiration} 后过期 (模拟)。</p>`;
    }
    if (note.deleteAfterReading) {
      contentHtml += `<p class="text-sm text-gray-500">此笔记将在首次阅读后删除 (模拟)。</p>`;
    }

    noteDisplayArea.innerHTML = contentHtml;
  }

  function loadNote() {
    const storedNotes = JSON.parse(
      localStorage.getItem(NOTES_STORAGE_KEY) || "[]"
    );
    currentNote = storedNotes.find((n) => n.id === noteId);

    if (currentNote) {
      if (currentNote.password) {
        // 如果有密码，显示密码输入框
        noteDisplayArea.innerHTML = `<p class="text-gray-600">此笔记受密码保护。</p>`;
        passwordInputContainer.classList.remove("hidden");
        viewNoteButton.onclick = () => {
          if (viewPasswordInput.value === currentNote.password) {
            passwordInputContainer.classList.add("hidden");
            displayNote(currentNote);
            // 模拟“阅读后删除”逻辑
            if (currentNote.deleteAfterReading) {
              const updatedNotes = storedNotes.filter((n) => n.id !== noteId);
              localStorage.setItem(
                NOTES_STORAGE_KEY,
                JSON.stringify(updatedNotes)
              );
              console.log(`笔记 ${noteId} 已被模拟删除。`);
            }
          } else {
            alert("密码不正确！");
          }
        };
      } else {
        // 没有密码，直接显示
        displayNote(currentNote);
        // 模拟“阅读后删除”逻辑
        if (currentNote.deleteAfterReading) {
          const updatedNotes = storedNotes.filter((n) => n.id !== noteId);
          localStorage.setItem(NOTES_STORAGE_KEY, JSON.stringify(updatedNotes));
          console.log(`笔记 ${noteId} 已被模拟删除。`);
        }
      }
    } else {
      noteDisplayArea.innerHTML = `<p class="text-red-500">笔记未找到或已过期/删除。</p>`;
    }
  }

  // 页面加载时加载笔记
  document.addEventListener("DOMContentLoaded", loadNote);
</script>
